/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Reading } from "./Reading";
import { ReadingCountArgs } from "./ReadingCountArgs";
import { ReadingFindManyArgs } from "./ReadingFindManyArgs";
import { ReadingFindUniqueArgs } from "./ReadingFindUniqueArgs";
import { CreateReadingArgs } from "./CreateReadingArgs";
import { UpdateReadingArgs } from "./UpdateReadingArgs";
import { DeleteReadingArgs } from "./DeleteReadingArgs";
import { EsgMetric } from "../../esgMetric/base/EsgMetric";
import { IoTDevice } from "../../ioTDevice/base/IoTDevice";
import { ReadingService } from "../reading.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Reading)
export class ReadingResolverBase {
  constructor(
    protected readonly service: ReadingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Reading",
    action: "read",
    possession: "any",
  })
  async _readingsMeta(
    @graphql.Args() args: ReadingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Reading])
  @nestAccessControl.UseRoles({
    resource: "Reading",
    action: "read",
    possession: "any",
  })
  async readings(
    @graphql.Args() args: ReadingFindManyArgs
  ): Promise<Reading[]> {
    return this.service.readings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Reading, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Reading",
    action: "read",
    possession: "own",
  })
  async reading(
    @graphql.Args() args: ReadingFindUniqueArgs
  ): Promise<Reading | null> {
    const result = await this.service.reading(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Reading)
  @nestAccessControl.UseRoles({
    resource: "Reading",
    action: "create",
    possession: "any",
  })
  async createReading(
    @graphql.Args() args: CreateReadingArgs
  ): Promise<Reading> {
    return await this.service.createReading({
      ...args,
      data: {
        ...args.data,

        esgMetric: args.data.esgMetric
          ? {
              connect: args.data.esgMetric,
            }
          : undefined,

        ioTDevice: args.data.ioTDevice
          ? {
              connect: args.data.ioTDevice,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Reading)
  @nestAccessControl.UseRoles({
    resource: "Reading",
    action: "update",
    possession: "any",
  })
  async updateReading(
    @graphql.Args() args: UpdateReadingArgs
  ): Promise<Reading | null> {
    try {
      return await this.service.updateReading({
        ...args,
        data: {
          ...args.data,

          esgMetric: args.data.esgMetric
            ? {
                connect: args.data.esgMetric,
              }
            : undefined,

          ioTDevice: args.data.ioTDevice
            ? {
                connect: args.data.ioTDevice,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Reading)
  @nestAccessControl.UseRoles({
    resource: "Reading",
    action: "delete",
    possession: "any",
  })
  async deleteReading(
    @graphql.Args() args: DeleteReadingArgs
  ): Promise<Reading | null> {
    try {
      return await this.service.deleteReading(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => EsgMetric, {
    nullable: true,
    name: "esgMetric",
  })
  @nestAccessControl.UseRoles({
    resource: "EsgMetric",
    action: "read",
    possession: "any",
  })
  async getEsgMetric(
    @graphql.Parent() parent: Reading
  ): Promise<EsgMetric | null> {
    const result = await this.service.getEsgMetric(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => IoTDevice, {
    nullable: true,
    name: "ioTDevice",
  })
  @nestAccessControl.UseRoles({
    resource: "IoTDevice",
    action: "read",
    possession: "any",
  })
  async getIoTDevice(
    @graphql.Parent() parent: Reading
  ): Promise<IoTDevice | null> {
    const result = await this.service.getIoTDevice(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
