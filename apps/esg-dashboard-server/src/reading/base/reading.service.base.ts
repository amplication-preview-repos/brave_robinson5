/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Reading as PrismaReading,
  EsgMetric as PrismaEsgMetric,
  IoTDevice as PrismaIoTDevice,
} from "@prisma/client";

export class ReadingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ReadingCountArgs, "select">): Promise<number> {
    return this.prisma.reading.count(args);
  }

  async readings(args: Prisma.ReadingFindManyArgs): Promise<PrismaReading[]> {
    return this.prisma.reading.findMany(args);
  }
  async reading(
    args: Prisma.ReadingFindUniqueArgs
  ): Promise<PrismaReading | null> {
    return this.prisma.reading.findUnique(args);
  }
  async createReading(args: Prisma.ReadingCreateArgs): Promise<PrismaReading> {
    return this.prisma.reading.create(args);
  }
  async updateReading(args: Prisma.ReadingUpdateArgs): Promise<PrismaReading> {
    return this.prisma.reading.update(args);
  }
  async deleteReading(args: Prisma.ReadingDeleteArgs): Promise<PrismaReading> {
    return this.prisma.reading.delete(args);
  }

  async getEsgMetric(parentId: string): Promise<PrismaEsgMetric | null> {
    return this.prisma.reading
      .findUnique({
        where: { id: parentId },
      })
      .esgMetric();
  }

  async getIoTDevice(parentId: string): Promise<PrismaIoTDevice | null> {
    return this.prisma.reading
      .findUnique({
        where: { id: parentId },
      })
      .ioTDevice();
  }
}
