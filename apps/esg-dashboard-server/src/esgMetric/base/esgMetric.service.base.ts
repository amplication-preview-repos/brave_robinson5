/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  EsgMetric as PrismaEsgMetric,
  Reading as PrismaReading,
} from "@prisma/client";

export class EsgMetricServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EsgMetricCountArgs, "select">
  ): Promise<number> {
    return this.prisma.esgMetric.count(args);
  }

  async esgMetrics(
    args: Prisma.EsgMetricFindManyArgs
  ): Promise<PrismaEsgMetric[]> {
    return this.prisma.esgMetric.findMany(args);
  }
  async esgMetric(
    args: Prisma.EsgMetricFindUniqueArgs
  ): Promise<PrismaEsgMetric | null> {
    return this.prisma.esgMetric.findUnique(args);
  }
  async createEsgMetric(
    args: Prisma.EsgMetricCreateArgs
  ): Promise<PrismaEsgMetric> {
    return this.prisma.esgMetric.create(args);
  }
  async updateEsgMetric(
    args: Prisma.EsgMetricUpdateArgs
  ): Promise<PrismaEsgMetric> {
    return this.prisma.esgMetric.update(args);
  }
  async deleteEsgMetric(
    args: Prisma.EsgMetricDeleteArgs
  ): Promise<PrismaEsgMetric> {
    return this.prisma.esgMetric.delete(args);
  }

  async findReadings(
    parentId: string,
    args: Prisma.ReadingFindManyArgs
  ): Promise<PrismaReading[]> {
    return this.prisma.esgMetric
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .readings(args);
  }
}
