/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EsgMetric } from "./EsgMetric";
import { EsgMetricCountArgs } from "./EsgMetricCountArgs";
import { EsgMetricFindManyArgs } from "./EsgMetricFindManyArgs";
import { EsgMetricFindUniqueArgs } from "./EsgMetricFindUniqueArgs";
import { CreateEsgMetricArgs } from "./CreateEsgMetricArgs";
import { UpdateEsgMetricArgs } from "./UpdateEsgMetricArgs";
import { DeleteEsgMetricArgs } from "./DeleteEsgMetricArgs";
import { ReadingFindManyArgs } from "../../reading/base/ReadingFindManyArgs";
import { Reading } from "../../reading/base/Reading";
import { EsgMetricService } from "../esgMetric.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EsgMetric)
export class EsgMetricResolverBase {
  constructor(
    protected readonly service: EsgMetricService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EsgMetric",
    action: "read",
    possession: "any",
  })
  async _esgMetricsMeta(
    @graphql.Args() args: EsgMetricCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EsgMetric])
  @nestAccessControl.UseRoles({
    resource: "EsgMetric",
    action: "read",
    possession: "any",
  })
  async esgMetrics(
    @graphql.Args() args: EsgMetricFindManyArgs
  ): Promise<EsgMetric[]> {
    return this.service.esgMetrics(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EsgMetric, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EsgMetric",
    action: "read",
    possession: "own",
  })
  async esgMetric(
    @graphql.Args() args: EsgMetricFindUniqueArgs
  ): Promise<EsgMetric | null> {
    const result = await this.service.esgMetric(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EsgMetric)
  @nestAccessControl.UseRoles({
    resource: "EsgMetric",
    action: "create",
    possession: "any",
  })
  async createEsgMetric(
    @graphql.Args() args: CreateEsgMetricArgs
  ): Promise<EsgMetric> {
    return await this.service.createEsgMetric({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EsgMetric)
  @nestAccessControl.UseRoles({
    resource: "EsgMetric",
    action: "update",
    possession: "any",
  })
  async updateEsgMetric(
    @graphql.Args() args: UpdateEsgMetricArgs
  ): Promise<EsgMetric | null> {
    try {
      return await this.service.updateEsgMetric({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EsgMetric)
  @nestAccessControl.UseRoles({
    resource: "EsgMetric",
    action: "delete",
    possession: "any",
  })
  async deleteEsgMetric(
    @graphql.Args() args: DeleteEsgMetricArgs
  ): Promise<EsgMetric | null> {
    try {
      return await this.service.deleteEsgMetric(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Reading], { name: "readings" })
  @nestAccessControl.UseRoles({
    resource: "Reading",
    action: "read",
    possession: "any",
  })
  async findReadings(
    @graphql.Parent() parent: EsgMetric,
    @graphql.Args() args: ReadingFindManyArgs
  ): Promise<Reading[]> {
    const results = await this.service.findReadings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
